javascript:
(function() {
    const hiddenElements = new Set();
    var cssTemplate = "<style>.header .container{position:relative}#gdf{box-sizing:border-box;width:180px;padding:.5em 1em;position:absolute;top:-4px;left:1000px;z-index:1;background:rgba(0,0,0,0.6);box-shadow:-4px 5px 0 0 rgba(0,0,0,0.2);text-shadow:none}#gdf-title{margin-bottom:8px;color:#FFF;font-size:2em}#gdf label{color:#EEE}#gdf-hide-input{width:100px;min-height:26px;padding:3px 8px;margin-top:4px}#gdf-hide-btn{margin-top:4px}#gdf-show-all-btn{width:100px;margin:8px 0 4px;font-weight:normal}#gdf-show-all-btn:disabled{background:#CCC;color:#999}#gdf-close-btn{padding:4px 0;margin:8px 4px 0;float:right;color:#7FB8E6;cursor:pointer}</style>";
    var formTemplate = '<div id="gdf"> <div id="gdf-title">Filter this Diff</div> <label> Hide file paths matching <input id="gdf-hide-input" type="text" placeholder=".css,.min"> </label> <a id="gdf-hide-btn" class="minibutton">Hide</a> <button id="gdf-show-all-btn" class="minibutton" disabled>Show all files</button> <a id="gdf-close-btn">close</a> </div> ';
    var viewedTemplate = '<label   class="js-reviewed-toggle ml-2 mr-1 px-2 py-1 rounded-2 f6 text-normal d-flex flex-items-center border js-reviewed-file color-bg-accent color-border-accent"   style="cursor: pointer" >   <input class="mr-1 js-reviewed-checkbox" type="checkbox"   />   Viewed </label> ';
    let gdf = document.querySelector("#gdf");
    if (!gdf) {
        appendStyles();
        appendFilterForm();
        addFormListeners();
        appendViewedCheckboxes();
        const txtFilter = document.querySelector("#gdf-hide-input");
        const btnHide = document.querySelector("#gdf-hide-btn");
        const btnShowAll = document.querySelector("#gdf-show-all-btn");
        const btnClose = document.querySelector("#gdf-close-btn");
        function appendStyles() {
            document.head.append(document.createRange().createContextualFragment(cssTemplate));
        }
        function appendFilterForm() {
            document.querySelector(".toc-diff-stats").append(document.createRange().createContextualFragment(formTemplate));
            gdf = document.querySelector("#gdf");
        }
        function addFormListeners() {
            btnHide.addEventListener("click", applyFilter);
            txtFilter.addEventListener("keyup", filterOnEnter);
            btnShowAll.addEventListener("click", showAll);
            btnClose.addEventListener("click", function() {
                gdf.hidden = true;
            });
        }
        function appendViewedCheckboxes() {
            document.querySelectorAll(".file-info").forEach(el => {
                el.after(document.createRange().createContextualFragment(viewedTemplate));
            });
            document.querySelector(".js-diff-progressive-container").addEventListener("change", event => {
                if (event.target.classList.contains("js-reviewed-checkbox")) {
                    event.target.parentElement.previousSibling.querySelector("button")?.click();
                }
            });
        }
        function filterOnEnter(event) {
            if (event.key === "Enter") {
                applyFilter();
            }
        }
        function applyFilter() {
            var query = txtFilter.value;
            if (query !== "") {
                query.split(",").forEach(filterPath);
                btnShowAll.disabled = false;
                txtFilter.value = "";
                txtFilter.focus();
            }
        }
        function filterPath(path) {
            const replacementPattern = toRegex(path);
            hideTableOfContentsEntry(replacementPattern);
            hideDiffEntry(replacementPattern);
            updateCounts();
        }
        function hideTableOfContentsEntry(pattern) {
            [ ...document.querySelectorAll('#toc a[href^="#diff"]') ].filter(el => el.textContent.match(pattern)).map(el => el.closest("li")).forEach(hide);
        }
        function hideDiffEntry(pattern) {
            [ ...document.querySelectorAll(`[data-tagsearch-path]`) ].filter(el => el.attributes["data-tagsearch-path"]?.value.match(pattern)).forEach(hide);
        }
        function updateCounts() {
            const fileCount = document.querySelectorAll(`[data-tagsearch-path]:not([hidden])`).length;
            const statsButton = document.querySelector(".toc-diff-stats>button");
            statsButton.textContent = `${fileCount} changed files`;
        }
        function toRegex(wildcardPattern) {
            const regexPattern = wildcardPattern.replace(/[-\/\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*").replace(/\*/g, ".*");
            return `^${regexPattern}$`;
        }
        function hide(el) {
            if (!hiddenElements.has(el)) {
                el.hidden = true;
                hiddenElements.add(el);
            }
        }
        function showAll() {
            hiddenElements.forEach(el => el.hidden = false);
            hiddenElements.clear();
            btnShowAll.disabled = true;
        }
    }
    gdf.hidden = true;
})();